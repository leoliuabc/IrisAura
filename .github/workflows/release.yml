name: Build IrisAura

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  APP_NAME: IrisAura
  BUILD_DIR: build
  FRONTEND_DIR: frontend

jobs:
  # ==========================
  # macOS æž„å»º + Universal
  # ==========================
  macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      - name: Go mod tidy & download
        run: |
          go mod tidy
          go mod download

      - name: Prepare directories
        run: |
          mkdir -p build/bin/macos/amd64
          mkdir -p build/bin/macos/arm64
          mkdir -p build/bin/macos/Universal

      # ----------------------
      # æž„å»º Intel
      # ----------------------
      - name: Build Intel (amd64)
        run: |
          echo "ðŸ”¹ Building Intel (amd64)..."
          wails build -platform darwin/amd64
          if [ ! -d "build/bin/${{ env.APP_NAME }}.app" ]; then
            echo "Intel build failed!"
            exit 1
          fi
          mv build/bin/${{ env.APP_NAME }}.app build/bin/macos/amd64/${{ env.APP_NAME }}-intel.app

      # ----------------------
      # æž„å»º ARM64
      # ----------------------
      - name: Build ARM64
        run: |
          echo "ðŸ”¹ Building ARM64..."
          wails build -platform darwin/arm64
          if [ ! -d "build/bin/${{ env.APP_NAME }}.app" ]; then
            echo "ARM64 build failed!"
            exit 1
          fi
          mv build/bin/${{ env.APP_NAME }}.app build/bin/macos/arm64/${{ env.APP_NAME }}-arm64.app

      # ----------------------
      # æž„å»º Universal
      # ----------------------
      - name: Build Universal
        run: |
          echo "ðŸ”¹ Creating macOS Universal..."
          # ç¡®è®¤ Intel + ARM64 æ–‡ä»¶å­˜åœ¨
          if [ ! -d "build/bin/macos/amd64/${{ env.APP_NAME }}-intel.app" ] || [ ! -d "build/bin/macos/arm64/${{ env.APP_NAME }}-arm64.app" ]; then
            echo "Intel or ARM64 build missing!"
            exit 1
          fi
          cp -R build/bin/macos/amd64/${{ env.APP_NAME }}-intel.app build/bin/macos/Universal/${{ env.APP_NAME }}.app
          lipo -create \
            build/bin/macos/amd64/${{ env.APP_NAME }}-intel.app/Contents/MacOS/${{ env.APP_NAME }} \
            build/bin/macos/arm64/${{ env.APP_NAME }}-arm64.app/Contents/MacOS/${{ env.APP_NAME }} \
            -output build/bin/macos/Universal/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}
          codesign --deep --force --sign - build/bin/macos/Universal/${{ env.APP_NAME }}.app

      - name: Zip macOS Universal app
        run: |
          cd build/bin/macos/Universal
          zip -r IrisAura-macos-Universal.zip IrisAura.app

      - name: Upload macOS Universal release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: IrisAura-macos-Universal
          files: build/bin/macos/Universal/IrisAura-macos-Universal.zip
          token: ${{ secrets.GH_TOKEN }}

  # ==========================
  # Windows æž„å»º
  # ==========================
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      - name: Go mod tidy & download
        run: |
          go mod tidy
          go mod download

      - name: Prepare directories
        run: |
          mkdir -p build/bin/windows/${{ matrix.arch }}

      - name: Build Windows
        shell: bash
        run: |
          GOOS=windows GOARCH=${{ matrix.arch }} wails build -platform windows/${{ matrix.arch }}
          if [ ! -f "build/bin/${{ env.APP_NAME }}.exe" ]; then
            echo "Windows build failed!"
            exit 1
          fi
          mv build/bin/${{ env.APP_NAME }}.exe build/bin/windows/${{ matrix.arch }}/${{ env.APP_NAME }}-${{ matrix.arch }}.exe

      - name: Upload Windows release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: IrisAura-Windows-${{ matrix.arch }}
          files: build/bin/windows/${{ matrix.arch }}/*
          token: ${{ secrets.GH_TOKEN }}