name: Build IrisAura

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  APP_NAME: IrisAura
  BUILD_DIR: build
  FRONTEND_DIR: frontend

jobs:
  build-all:
    runs-on: macos-latest
    strategy:
      matrix:
        os: [windows, macos]
        win_arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      - name: Go mod tidy & download
        run: |
          go mod tidy
          go mod download

      # ----------------------
      # å‡†å¤‡æ‰€æœ‰ç›®å½•
      # ----------------------
      - name: Prepare build directories
        run: |
          mkdir -p build/bin/macos/amd64
          mkdir -p build/bin/macos/arm64
          mkdir -p build/bin/macos/Universal
          mkdir -p build/bin/windows/amd64
          mkdir -p build/bin/windows/arm64

      # ==========================
      # macOS æž„å»º
      # ==========================
      - name: Build macOS Intel
        if: matrix.os == 'macos'
        run: |
          echo "ðŸ”¹ Building macOS Intel..."
          wails build -platform darwin/amd64
          mv build/bin/${{ env.APP_NAME }}.app build/bin/macos/amd64/${{ env.APP_NAME }}-intel.app

      - name: Build macOS ARM
        if: matrix.os == 'macos'
        run: |
          echo "ðŸ”¹ Building macOS ARM..."
          wails build -platform darwin/arm64
          mv build/bin/${{ env.APP_NAME }}.app build/bin/macos/arm64/${{ env.APP_NAME }}-arm64.app

      - name: Build macOS Universal
        if: matrix.os == 'macos'
        run: |
          echo "ðŸ”¹ Creating macOS Universal..."
          cp -R build/bin/macos/amd64/${{ env.APP_NAME }}-intel.app build/bin/macos/Universal/${{ env.APP_NAME }}.app
          lipo -create \
            build/bin/macos/amd64/${{ env.APP_NAME }}-intel.app/Contents/MacOS/${{ env.APP_NAME }} \
            build/bin/macos/arm64/${{ env.APP_NAME }}-arm64.app/Contents/MacOS/${{ env.APP_NAME }} \
            -output build/bin/macos/Universal/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}
          codesign --deep --force --sign - build/bin/macos/Universal/${{ env.APP_NAME }}.app

      - name: Upload macOS Universal release
        if: matrix.os == 'macos'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: IrisAura-macos-Universal
          files: build/bin/macos/Universal/*
          token: ${{ secrets.GH_TOKEN }}

      # ==========================
      # Windows æž„å»º
      # ==========================
      - name: Build Windows
        if: matrix.os == 'windows'
        run: |
          for arch in "${{ matrix.win_arch[@] }}"; do
            echo "ðŸ”¹ Building Windows $arch..."
            GOOS=windows GOARCH=$arch wails build -platform windows/$arch
            mv build/bin/${{ env.APP_NAME }}.exe build/bin/windows/$arch/${{ env.APP_NAME }}-$arch.exe
          done

      - name: Upload Windows releases
        if: matrix.os == 'windows'
        run: |
          for arch in "${{ matrix.win_arch[@] }}"; do
            gh release upload ${{ github.ref_name }} build/bin/windows/$arch/${{ env.APP_NAME }}-$arch.exe --clobber
          done